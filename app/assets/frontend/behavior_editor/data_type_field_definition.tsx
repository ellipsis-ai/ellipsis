import * as React from 'react';
import DeleteButton from '../shared_ui/delete_button';
import FormInput from '../form/input';
import Formatter from '../lib/formatter';
import Select, {SelectOption} from '../form/select';
import DataTypeField from '../models/data_type_field';
import ParamType from '../models/param_type';
import autobind from '../lib/autobind';
import Button from "../form/button";

interface Props {
  id: string
  behaviorVersionId: Option<string>
  field: DataTypeField
  isBuiltIn: boolean
  paramTypes: Array<ParamType>
  onChange: (newField: DataTypeField) => void
  onDelete: () => void
  onConfigureType: (fieldTypeId: string) => void
}

class DataTypeFieldDefinition extends React.Component<Props> {
    nameInput: Option<FormInput>;

    constructor(props: Props) {
      super(props);
      autobind(this);
    }

    onNameChange(newName: string): void {
      this.props.onChange(this.props.field.clone({ name: Formatter.formatNameForCode(newName) }));
    }

    onTypeChange(newTypeId: string): void {
      var newType = this.props.paramTypes.find(ea => ea.id === newTypeId);
      this.props.onChange(this.props.field.clone({ fieldType: newType }));
    }

    onDeleteClick(): void {
      this.props.onDelete();
    }

    onConfigureType(): void {
      if (this.props.field.fieldType.id) {
        this.props.onConfigureType(this.props.field.fieldType.id);
      }
    }

    isConfigurable(): boolean {
      const paramType = this.props.field.fieldType;
      return paramType.id !== paramType.name && paramType.id !== this.props.behaviorVersionId;
    }

    focus(): void {
      if (this.nameInput) {
        this.nameInput.focus();
        this.nameInput.select();
      }
    }

    keyFor(fieldType: ParamType): string {
      return `field-type-${this.props.id}-${fieldType.id || "unknown"}`;
    }

    isBuiltIn(): boolean {
      return this.props.isBuiltIn;
    }

    getParamTypeOptions(): Array<SelectOption> {
      return this.props.paramTypes.map((ea) => ({
        key: this.keyFor(ea),
        value: ea.id || "",
        label: ea.name
      })).filter((ea) => Boolean(ea.value));
    }

    renderFieldType() {
      const fieldTypeId = this.props.field.fieldType.id || "";
      if (this.isBuiltIn()) {
        return (
          <span className="type-s type-weak">Text generated by Ellipsis</span>
        );
      } else {
        return (
          <Select
            className="form-select-s form-select-light align-m width-full"
            name="paramType"
            value={fieldTypeId}
            onChange={this.onTypeChange}
          >
            {this.getParamTypeOptions().map((option) => (
              <option value={option.value} key={option.key}>{option.label}</option>
            ))}
          </Select>
        );
      }
    }

    renderDeleteButton() {
      if (this.isBuiltIn()) {
        return null;
      } else {
        return (
          <DeleteButton
            onClick={this.onDeleteClick}
            title={this.props.field.name ? `Delete the “${this.props.field.name}” field` : "Delete this field"}
          />
        );
      }
    }

    render() {
      return (
        <div>
          <div className={`border border-light plm pbxs ${
              this.isBuiltIn() ? "bg-light-translucent" : "bg-white"
            }`}>
            <div className="columns">
              <div className="column column-one-half narrow-column-full">
                <div className="columns columns-elastic">
                  <div className="column column-shrink align-form-input prs type-s type-weak">Name:</div>
                  <div className="column column-expand">
                    <FormInput
                      ref={(el) => this.nameInput = el}
                      className="form-input-borderless type-monospace mrxl"
                      placeholder=""
                      value={this.props.field.name}
                      onChange={this.onNameChange}
                      readOnly={this.isBuiltIn()}
                    />
                  </div>
                </div>
              </div>
              <div className="column column-one-half narrow-column-full">
                <div className="columns columns-elastic">
                  <div className="column column-shrink prs type-s type-weak align-form-input ">
                    <div className="display-ellipsis">Type of data:</div>
                  </div>
                  <div className="column column-expand align-form-input prs">
                    {this.renderFieldType()}
                  </div>
                  {this.isConfigurable() ? (
                    <div className="column column-shrink align-form-input">
                      <Button className="button-s button-shrink align-m" onClick={this.onConfigureType}>Edit type…</Button>
                    </div>
                  ) : null}
                  <div className="column column-shrink">
                    {this.renderDeleteButton()}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }
}

export default DataTypeFieldDefinition;
