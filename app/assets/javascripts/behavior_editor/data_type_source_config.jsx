define(function(require) {
  var React = require('react'),
    SectionHeading = require('../shared_ui/section_heading'),
    Checklist = require('./checklist'),
    ToggleGroup = require('../form/toggle_group');

  return React.createClass({
    displayName: 'DataTypeResultConfig',
    propTypes: {
      usesCode: React.PropTypes.bool.isRequired,
      onChange: React.PropTypes.func.isRequired,
      isFinishedBehavior: React.PropTypes.bool.isRequired
    },

    onUseDefaultStorage: function() {
      this.props.onChange(false);
    },

    onUseCode: function() {
      this.props.onChange(true);
    },

    defaultStorageLabel: "Data stored in Ellipsis",
    defaultStorageText: "You will define the data fields and you can optionally populate some initial data.",
    codeLabel: "Data generated by some code",
    codeText: "Common cases include requesting data from an external API or computing dynamic data.",

    render: function() {
      return (
        <div className="container ptxl pbxxxl">
          <div>
            <SectionHeading number="1">Where does the data come from?</SectionHeading>
            <Checklist disabledWhen={this.props.isFinishedBehavior}>
              <Checklist.Item checkedWhen={!this.props.usesCode}>
                <div>Choose <span className="type-semibold">{this.defaultStorageLabel}</span> for data you will define and store here.</div>
              </Checklist.Item>
              <Checklist.Item checkedWhen={this.props.usesCode}>
                <div>Use <span className="type-semibold">{this.codeLabel}</span> when requesting data from an external API or computing dynamic data.</div>
              </Checklist.Item>
            </Checklist>
          </div>

          <div>
            <ToggleGroup className="align-m">
              <ToggleGroup.Item
                title={this.defaultStorageText}
                label={this.defaultStorageLabel}
                activeWhen={!this.props.usesCode}
                onClick={this.onUseDefaultStorage}
              />
              <ToggleGroup.Item
                title={this.codeText}
                label={this.codeLabel}
                activeWhen={this.props.usesCode}
                onClick={this.onUseCode}
              />
            </ToggleGroup>
          </div>
        </div>
      );
    }
  });
});
