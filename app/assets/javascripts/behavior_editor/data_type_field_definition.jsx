define(function(require) {
  const React = require('react'),
    DeleteButton = require('../shared_ui/delete_button'),
    FormInput = require('../form/input'),
    Formatter = require('../lib/formatter'),
    Select = require('../form/select'),
    DataTypeField = require('../models/data_type_field'),
    ParamType = require('../models/param_type'),
    ifPresent = require('../lib/if_present'),
    autobind = require('../lib/autobind');

  class DataTypeFieldDefinition extends React.Component {
    constructor(props) {
      super(props);
      autobind(this);
    }

    onNameChange(newName) {
      this.props.onChange(this.props.field.clone({ name: Formatter.formatNameForCode(newName) }));
    }

    onTypeChange(newTypeId) {
      var newType = this.props.paramTypes.find(ea => ea.id === newTypeId);
      this.props.onChange(this.props.field.clone({ fieldType: newType }));
    }

    onDeleteClick() {
      this.props.onDelete();
    }

    onConfigureType() {
      this.props.onConfigureType(this.props.field.fieldType.id);
    }

    isConfigurable() {
      const paramType = this.props.field.fieldType;
      return paramType.id !== paramType.name && paramType.id !== this.props.behaviorVersionId;
    }

    focus() {
      this.refs.name.focus();
      this.refs.name.select();
    }

    keyFor(fieldType) {
      return 'field-type-' + this.props.id + '-' + fieldType.id;
    }

    isBuiltIn() {
      return this.props.isBuiltIn;
    }

    renderFieldType() {
      if (this.isBuiltIn()) {
        return (
          <span className="type-s type-weak">Text generated by Ellipsis</span>
        );
      } else {
        return (
          <Select
            className="form-select-s form-select-light align-m width-full"
            name="paramType"
            value={this.props.field.fieldType.id}
            onChange={this.onTypeChange}
          >
            {this.props.paramTypes.map((fieldType) => (
              <option value={fieldType.id} key={this.keyFor(fieldType)}>
                {fieldType.name}
              </option>
            ))}
          </Select>
        );
      }
    }

    renderDeleteButton() {
      if (this.isBuiltIn()) {
        return null;
      } else {
        return (
          <DeleteButton
            onClick={this.onDeleteClick}
            title={this.props.field.name ? `Delete the “${this.props.field.name}” field` : "Delete this field"}
            disabled={this.isBuiltIn()}
          />
        );
      }
    }

    render() {
      return (
        <div>
          <div className={`border border-light plm pbxs ${
              this.isBuiltIn() ? "bg-light-translucent" : "bg-white"
            }`}>
            <div className="columns">
              <div className="column column-one-half narrow-column-full">
                <div className="columns columns-elastic">
                  <div className="column column-shrink align-form-input prs type-s type-weak">Name:</div>
                  <div className="column column-expand">
                    <FormInput
                      ref="name"
                      className="form-input-borderless type-monospace mrxl"
                      placeholder=""
                      value={this.props.field.name}
                      onChange={this.onNameChange}
                      readOnly={this.isBuiltIn()}
                    />
                  </div>
                </div>
              </div>
              <div className="column column-one-half narrow-column-full">
                <div className="columns columns-elastic">
                  <div className="column column-shrink prs type-s type-weak align-form-input ">
                    <div className="display-ellipsis">Type of data:</div>
                  </div>
                  <div className="column column-expand align-form-input prs">
                    {this.renderFieldType()}
                  </div>
                  {ifPresent(this.isConfigurable(), () => (
                    <div className="column column-shrink align-form-input">
                      <button type="button" className="button-s button-shrink align-m" onClick={this.onConfigureType}>Edit type…</button>
                    </div>
                  ))}
                  <div className="column column-shrink">
                    {this.renderDeleteButton()}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }
  }

  DataTypeFieldDefinition.propTypes = {
    id: React.PropTypes.oneOfType([
      React.PropTypes.number,
      React.PropTypes.string
    ]).isRequired,
    behaviorVersionId: React.PropTypes.string.isRequired,
    field: React.PropTypes.instanceOf(DataTypeField).isRequired,
    isBuiltIn: React.PropTypes.bool.isRequired,
    paramTypes: React.PropTypes.arrayOf(React.PropTypes.instanceOf(ParamType)).isRequired,
    onChange: React.PropTypes.func.isRequired,
    onDelete: React.PropTypes.func.isRequired,
    shouldGrabFocus: React.PropTypes.bool,
    onConfigureType: React.PropTypes.func.isRequired
  };

  return DataTypeFieldDefinition;

});
