define(function(require) {
  var React = require('react'),
    DeleteButton = require('../shared_ui/delete_button'),
    FormInput = require('../form/input'),
    Formatter = require('../lib/formatter'),
    Select = require('../form/select'),
    DataTypeField = require('../models/data_type_field'),
    ifPresent = require('../lib/if_present');

  return React.createClass({
    displayName: 'DataTypeFieldDefinition',
    propTypes: {
      id: React.PropTypes.oneOfType([
        React.PropTypes.number,
        React.PropTypes.string
      ]).isRequired,
      field: React.PropTypes.instanceOf(DataTypeField).isRequired,
      paramTypes: React.PropTypes.arrayOf(
        React.PropTypes.shape({
          id: React.PropTypes.string,
          name: React.PropTypes.string
        })
      ).isRequired,
      onChange: React.PropTypes.func.isRequired,
      onDelete: React.PropTypes.func.isRequired,
      shouldGrabFocus: React.PropTypes.bool,
      onConfigureType: React.PropTypes.func.isRequired
    },

    onNameChange: function(newName) {
      this.props.onChange(this.props.field.clone({ name: Formatter.formatNameForCode(newName) }));
    },

    onTypeChange: function(newTypeId) {
      var newType = this.props.paramTypes.find(ea => ea.id === newTypeId);
      this.props.onChange(this.props.field.clone({ fieldType: newType }));
    },

    onDeleteClick: function() {
      this.props.onDelete();
    },

    onConfigureType: function() {
      this.props.onConfigureType(this.props.field.fieldType.id);
    },

    isConfigurable: function() {
      const pt = this.props.field.fieldType;
      return pt.id !== pt.name;
    },

    focus: function() {
      this.refs.name.focus();
      this.refs.name.select();
    },

    keyFor: function(fieldType) {
      return 'field-type-' + this.props.id + '-' + fieldType.id;
    },

    isBuiltIn: function() {
      return this.props.field.name === "id";
    },

    renderFieldType: function() {
      if (this.isBuiltIn()) {
        return (
          <span>{this.props.field.fieldType.name} (generated by Ellipsis)</span>
        );
      } else {
        return (
          <Select
            className="form-select-s form-select-light align-m width-full"
            name="paramType"
            value={this.props.field.fieldType.id}
            onChange={this.onTypeChange}
            disabled={this.isBuiltIn()}
          >
            {this.props.paramTypes.map((fieldType) => (
              <option value={fieldType.id} key={this.keyFor(fieldType)}>
                {fieldType.name}
              </option>
            ))}
          </Select>
        );
      }
    },

    renderDeleteButton: function() {
      if (this.isBuiltIn()) {
        return null;
      } else {
        return (
          <DeleteButton
            onClick={this.onDeleteClick}
            title={this.props.field.name ? `Delete the “${this.props.field.name}” field` : "Delete this field"}
            disabled={this.isBuiltIn()}
          />
        );
      }
    },

    render: function() {
      return (
        <div>
          <div className="border border-light bg-white plm pbxs">
            <div className="columns columns-elastic">
              <div className="column column-expand">
                <div className="columns">
                  <div className="column column-one-half narrow-column-full">
                    <div className="columns columns-elastic">
                      <div className="column column-shrink align-form-input">
                        <span className=" type-s type-weak">Name:</span>
                      </div>
                      <div className="column column-expand">
                        <FormInput
                          ref="name"
                          className="form-input-borderless type-monospace mrxl"
                          placeholder=""
                          value={this.props.field.name}
                          onChange={this.onNameChange}
                          disabled={this.isBuiltIn()}
                        />
                      </div>
                    </div>
                  </div>
                  <div className="column column-one-half narrow-column-full">
                    <div className="columns columns-elastic">
                      <div className="column column-shrink">
                        <div className="type-s type-weak mrs align-form-input display-ellipsis">Type of data:</div>
                      </div>
                      <div className="column column-expand align-form-input">
                        {this.renderFieldType()}
                      </div>
                      {ifPresent(this.isConfigurable(), () => (
                        <div className="column column-shrink align-form-input">
                          <button type="button" className="button-s button-shrink" onClick={this.onConfigureType}>Edit type…</button>
                        </div>
                      ))}
                      <div className="column column-shrink">
                        {this.renderDeleteButton()}
                      </div>
                    </div>
                  </div>

                </div>

              </div>
            </div>
          </div>
        </div>
      );
    }
  });

});
