version: 2
jobs:
  build:
    # branches:
    #   only:
    #     - master
    docker:
      - image: ellipsis/circleci_primary:latest
        environment:
          AWS_REGION: us-east-1
          DB_HOST: localhost
          DB_PORT: 5432
          # JAVA_TOOL_OPTIONS: '-Dfile.encoding=UTF8 -Duser.timezone=UTC'
          # _JAVA_OPTIONS: '-Xms512m -Xmx1024m -Xss2m'
      - image: postgres:9.6.2
        environment:
          POSTGRES_USER: ellipsis
          POSTGRES_DB: ellipsis-test
          POSTGRES_PASSWORD: ellipsis
    working_directory: ~/ellipsis
    steps:
      - checkout
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgress && exit 1
      - run:
          name: Debugging
          command: |
            tar  --help
            gzip --help
      - restore_cache:
          key: v2-node-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install npm dependencies
          command: |
            npm install
      - save_cache:
          paths:
            - node_modules
          key: v2-node-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Run JavaScript Linter
          command: |
            npm run lint
      - run:
          name: Run JavaScript Tests
          command: |
            pushd npm_modules/ellipsis-cal-date-format/; npm install; popd
            npm test
      - restore_cache:
          key: v1-playapp-{{ .Branch }}-{{ checksum "build.sbt" }}
      - run:
          name: Run Activator Tests
          command: |
            activator test
      - save_cache:
          paths:
            - .ivy2
            - .sbt
          key: v1-playapp-{{ .Branch }}-{{ checksum "build.sbt" }}
      - run:
          name: Prepare app to be dockerized
          command: |
            BOT_VERSION=`git rev-parse --short HEAD`
            echo application.version=\"${BOT_VERSION}\" > conf/version.conf
            activator docker:stage
      - run:
          name: Prepare the Elasticbeanstalk bundle
          command: |
            BOT_VERSION=`git rev-parse --short HEAD`
            BOT_BUNDLE=$BOT_VERSION.zip
            echo "Bot bundle: ${BOT_BUNDLE}"
            BOT_BUNDLE_PATH=~/$BOT_BUNDLE
            echo "Bot bundle path: ${BOT_BUNDLE_PATH}"
            mkdir -p target/docker/.ebextensions
            cp .ebextensions/* target/docker/.ebextensions/
            cp deploy/Docker* target/docker/
            pushd target/docker
            zip -qq -r $BOT_BUNDLE_PATH .
            popd
            echo "Verifing bundle existance at ${BOT_BUNDLE_PATH}"
            test -e $BOT_BUNDLE_PATH
      - run:
          name: Upload Elastic beanstalk bundle
          command: |
            BOT_VERSION=`git rev-parse --short HEAD`
            BOT_BUNDLE=$BOT_VERSION.zip
            echo "Bot bundle: ${BOT_BUNDLE}"
            BOT_BUNDLE_PATH=~/$BOT_BUNDLE
            echo "Bot bundle path: ${BOT_BUNDLE_PATH}"
            AWS_ACCOUNT_ID=`aws ec2 describe-security-groups --group-names 'Default' --query 'SecurityGroups[0].OwnerId' --output text --region ${AWS_REGION}`
            echo "aws account id: ${AWS_ACCOUNT_ID}"
            BUCKET="greenbuilds-${AWS_ACCOUNT_ID}"
            echo "build bucket: ${BUCKET}"
            BUCKET_EXISTS=`aws s3api head-bucket --bucket "$BUCKET" 2>&1`
            echo "Bucket test result: ${BUCKET_EXISTS}"
            if [[ $BUCKET_EXISTS ]]; then
              echo "bucket does not exists, creating...";
              aws s3api create-bucket --bucket $BUCKET --region us-east-1
            else
              echo "bucket exists!";
            fi
            echo "uploading to builds bucket: s3://${BUCKET}/${BOT_BUNDLE}"
            S3_KEY=`date +'%Y-%m-%d'`-$BOT_BUNDLE
            echo "Uploading with command aws s3 --region ${AWS_REGION} cp ${BOT_BUNDLE_PATH} s3://${BUCKET}/${S3_KEY}"
            aws s3 --region ${AWS_REGION} cp ${BOT_BUNDLE_PATH} s3://${BUCKET}/${S3_KEY}
