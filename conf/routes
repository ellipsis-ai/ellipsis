# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET         /                                         @controllers.ApplicationController.index(teamId: Option[String] ?= None, branch: Option[String] ?= None)

# TODO: Remove these two obsolete routes if we're sure nobody uses them
GET         /install_skills                           @controllers.ApplicationController.index(teamId: Option[String] ?= None, branch: Option[String] ?= None)
GET         /install_behaviors                        @controllers.ApplicationController.index(teamId: Option[String] ?= None, branch: Option[String] ?= None)

GET         /fetch_published_skills                   @controllers.ApplicationController.fetchPublishedBehaviorInfo(teamId: Option[String] ?= None, branch: Option[String] ?= None)
POST        /merge_skills                             @controllers.ApplicationController.mergeBehaviorGroups
POST        /delete_skills                            @controllers.ApplicationController.deleteBehaviorGroups
GET         /search_skills                            @controllers.ApplicationController.findBehaviorGroupsMatching(queryString: String, branch: Option[String] ?= None, teamId: Option[String] ?= None)
POST        /set_team_time_zone                       @controllers.ApplicationController.setTeamTimeZone
GET         /possible_cities_for                      @controllers.ApplicationController.possibleCitiesFor(searchQuery: String)

GET         /new_skill                                @controllers.BehaviorEditorController.newGroup(teamId: Option[String] ?= None)
GET         /edit_skill/:id                           @controllers.BehaviorEditorController.edit(id: String, actionId: Option[String] ?= None)
GET         /export_skill/:id                         @controllers.BehaviorImportExportController.export(id: String)
GET         /export_behavior/:id                      @controllers.BehaviorImportExportController.export(id: String)
GET         /import_skill_zip                         @controllers.BehaviorImportExportController.importZip(teamId: Option[String] ?= None)
GET         /import_behavior_zip                      @controllers.BehaviorImportExportController.importZip(teamId: Option[String] ?= None)
POST        /import_skill_zip                         @controllers.BehaviorImportExportController.doImportZip
POST        /import_behavior_zip                      @controllers.BehaviorImportExportController.doImportZip
POST        /import_skill                             @controllers.BehaviorImportExportController.doImport
POST        /import_behavior                          @controllers.BehaviorImportExportController.doImport
POST        /save_skill                               @controllers.BehaviorEditorController.save
POST        /save_behavior                            @controllers.BehaviorEditorController.save
GET         /regex_validation_errors/:pattern         @controllers.BehaviorEditorController.regexValidationErrorsFor(pattern: String)
GET         /version_info/:behaviorId                 @controllers.BehaviorEditorController.versionInfoFor(behaviorId: String)
POST        /test_skill_triggers                      @controllers.BehaviorEditorController.testTriggers
POST        /test_behavior_triggers                   @controllers.BehaviorEditorController.testTriggers
POST        /test_skill_invocation                    @controllers.BehaviorEditorController.testInvocation
POST        /test_behavior_invocation                 @controllers.BehaviorEditorController.testInvocation
GET         /new_unsaved_behavior/:isDataType/:teamId   @controllers.BehaviorEditorController.newUnsavedBehavior(isDataType: Boolean, teamId: String, behaviorId: Option[String] ?= None)
GET         /new_unsaved_library/:teamId              @controllers.BehaviorEditorController.newUnsavedLibrary(teamId: String, libraryId: Option[String] ?= None)
GET         /new_unsaved_input/:name                  @controllers.BehaviorEditorController.newUnsavedInput(name: String)

POST        /reset_saved_answer_for_user              @controllers.SavedAnswerController.resetForUser
POST        /reset_saved_answer_for_all               @controllers.SavedAnswerController.resetForTeam

POST        /submit_environment_variables             @controllers.EnvironmentVariablesController.submit
POST        /delete_environment_variable              @controllers.EnvironmentVariablesController.delete

GET         /list_oauth2_applications                 @controllers.OAuth2ApplicationController.list(teamId: Option[String] ?= None)
GET         /new_oauth2_application                   @controllers.OAuth2ApplicationController.newApp(apiId: Option[String] ?= None, recommendedScope: Option[String] ?= None, teamId: Option[String] ?= None, behaviorId: Option[String] ?= None)
GET         /edit_oauth2_application/:id              @controllers.OAuth2ApplicationController.edit(id: String, teamId: Option[String] ?= None)
POST        /save_oauth2_application                  @controllers.OAuth2ApplicationController.save

GET         /list_oauth2_apis                         @controllers.OAuth2ApiController.list(teamId: Option[String] ?= None)
GET         /new_oauth2_api                           @controllers.OAuth2ApiController.newApi(teamId: Option[String] ?= None)
GET         /edit_oauth2_api/:id                      @controllers.OAuth2ApiController.edit(id: String, teamId: Option[String] ?= None)
POST        /save_oauth2_api                          @controllers.OAuth2ApiController.save

GET         /list_api_tokens                          @controllers.APITokenController.listTokens(tokenId: Option[String] ?= None, teamId: Option[String] ?= None)
POST        /create_api_token                         @controllers.APITokenController.createToken
POST        /revoke_api_token                         @controllers.APITokenController.revokeToken

GET         /list_environment_variables               @controllers.EnvironmentVariablesController.list(teamId: Option[String] ?= None)

GET         /scheduling                               @controllers.ScheduledActionsController.index(maybeTeamId: Option[String] ?= None)
POST        /save_schedule                            @controllers.ScheduledActionsController.save

GET         /authenticate/slack                       @controllers.SocialAuthController.authenticateSlack(redirect: Option[String] ?= None, team: Option[String] ?= None, channel: Option[String] ?= None)
GET         /install/slack                            @controllers.SocialAuthController.installForSlack(redirect: Option[String] ?= None, team: Option[String] ?= None, channel: Option[String] ?= None)
POST        /sign_out                                 @controllers.SocialAuthController.signOut
GET         /login_with_token/:token                  @controllers.SocialAuthController.loginWithToken(token: String, redirect: Option[String] ?= None)

GET         /add_to_slack                             @controllers.SlackController.add
GET         /sign_in_with_slack                       @controllers.SlackController.signIn(redirect: Option[String] ?= None)
POST        /slack/event                              @controllers.SlackController.event
POST        /slack/action                             @controllers.SlackController.action

GET         /link_oauth2/:configId                    @controllers.APIAccessController.linkCustomOAuth2Service(configId: String, code: Option[String], state: Option[String], invocationId: Option[String], redirect: Option[String])
GET         /authenticated/:message                   @controllers.APIAccessController.authenticated(message: String)

GET         /admin/lambda_functions                   @controllers.AdminController.lambdaFunctions()
POST        /admin/redeploy/:versionId                @controllers.AdminController.redeploy(versionId: String)

GET         /metrics/invocations_for_date/:token/:year/:month/:day          @controllers.VisibilityAPIController.invocationCountsForDate(token: String, year: String, month: String, day: String)
GET         /metrics/for_team_for_date/:token/:teamName/:year/:month/:day   @controllers.VisibilityAPIController.forTeamForDate(token: String, teamName: String, year: String, month: String, day: String)

GET         /help/scheduling                          @controllers.HelpController.scheduledMessages

GET         /health_check                             @controllers.HealthController.check

#POST        /authenticate/credentials        controllers.CredentialsAuthController.authenticate
#POST        /signUp                          controllers.SignUpController.signUp

GET         /get_item/:itemId/:itemType/:token        @controllers.DefaultStorage.getItem(itemId: String, itemType: String, token: String)
#NOCSRF
POST        /put_item                                 @controllers.DefaultStorage.putItem
#NOCSRF
POST        /api/post_message                         @controllers.APIController.postMessage
#NOCSRF
POST        /api/run_action                           @controllers.APIController.runAction
#NOCSRF
POST        /api/schedule_action                      @controllers.APIController.scheduleAction
#NOCSRF
POST        /api/unschedule_action                    @controllers.APIController.unscheduleAction
#NOCSRF
POST        /api/say                                  @controllers.APIController.say
#NOCSRF
GET         /get_action_logs/:behaviorId/:token       @controllers.InvocationLogController.getLogs(behaviorId: String, token: String, from: Option[String] ?= None, to: Option[String] ?= None, userId: Option[String] ?= None)


# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                             @controllers.RemoteAssets.getAsset(path="/public", file: Asset)

# Styleguide routes

GET         /styleguide/colors                        @controllers.StyleguideController.colors
